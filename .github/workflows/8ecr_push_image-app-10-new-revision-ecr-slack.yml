name: 8-Deploy IMAGE app10 to ECR New Revision ECR SLACK

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      IMAGE_VERSION: 11  # Inicia com o número 11 e aumenta a cada nova versão

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t hit-game-app10 ./app

      - name: Set IMAGE_NAME environment variable
        run: echo "IMAGE_NAME=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPOSITORY_NAME}:${IMAGE_VERSION}" >> $GITHUB_ENV

      - name: Tag Docker image with version
        run: |
          docker tag hit-game-app10:latest $IMAGE_NAME

      - name: Push Docker image to ECR
        run: | 
          docker push $IMAGE_NAME

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Register new task definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition estudo-dev-app-game10)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_NAME "$IMAGE_NAME" '.taskDefinition | .containerDefinitions[0].image=$IMAGE_NAME | del(.status,.revision,.taskDefinitionArn,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')
          echo "$NEW_TASK_DEFINITION" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Set outputs
        run: |
          echo "REPOSITORY_NAME=${REPOSITORY_NAME}" >> $GITHUB_OUTPUT
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy realizado no ECR por '${{ github.actor }}' no repositório '${{ secrets.REPOSITORY_NAME }}' na versão '${{ env.IMAGE_VERSION }}'."}' https://hooks.slack.com/services/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

      - name: Invoke Lambda Function
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"status": "success", "repository": "${{ secrets.REPOSITORY_NAME }}", "version": "${{ env.IMAGE_VERSION }}", "actor": "${{ github.actor }}"}' \
            https://g5tz4wjrskpkxe6zcjktq4rlhy0rhahv.lambda-url.us-east-1.on.aws/
